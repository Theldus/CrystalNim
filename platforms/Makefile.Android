# MIT License
#
# Copyright (c) 2021 Davidson Francis <davidsondfgl@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# Since this Makefile is heavily based on the Raylib's Makefile, the original
# follows as-is below:
#

#**************************************************************************************************
#
#   raylib makefile for Android project (APK building)
#
#   Copyright (c) 2017 Ramon Santamaria (@raysan5)
#
#   This software is provided "as-is", without any express or implied warranty. In no event
#   will the authors be held liable for any damages arising from the use of this software.
#
#   Permission is granted to anyone to use this software for any purpose, including commercial
#   applications, and to alter it and redistribute it freely, subject to the following restrictions:
#
#     1. The origin of this software must not be misrepresented; you must not claim that you
#     wrote the original software. If you use this software in a product, an acknowledgment
#     in the product documentation would be appreciated but is not required.
#
#     2. Altered source versions must be plainly marked as such, and must not be misrepresented
#     as being the original software.
#
#     3. This notice may not be removed or altered from any source distribution.
#
#**************************************************************************************************

#===================================================================
# Paths
#===================================================================

RAYLIB_LIB  ?= $(RAYLIB_INST)/lib/libraylib_android.a
INCLUDE      = -I $(CURDIR)/include/ -I $(RAYLIB_INC)

# Android paths
ANDROID_HOME        ?= /opt/android-sdk
ANDROID_BUILD_TOOLS ?= $(ANDROID_HOME)/build-tools/29.0.3
ANDROID_TOOLCHAIN    = $(ANDROID_NDK)/toolchains/llvm/prebuilt/linux-x86_64/

#===================================================================
# Android configuration
#===================================================================

#
# Device configs
#
# Valid values:
# - AR_19_9
# - AR_16_9
#
# If empty, AR_16_9 will be used instead.
#
DEVICE_ASPECT_RATIO    ?= AR_19_9

# Android configs
ANDROID_API_VERSION    ?= 29
ANDROID_ARCH           ?= arm64

# Project
PROJECT_NAME            = crystal_nim
PROJECT_LIBRARY_NAME    = main
PROJECT_BUILD_ID        = android
PROJECT_BUILD_PATH      = $(PROJECT_BUILD_ID).$(PROJECT_NAME)
PROJECT_RESOURCES_PATH  = resources/
PROJECT_SOURCE_FILES    = main.c scenes/ingame.c scenes/tutorial.c
PROJECT_SOURCE_DIRS     = $(dir $(PROJECT_SOURCE_FILES))

# Android app configuration variables
APP_LABEL_NAME    = CrystalNim
APP_COMPANY_NAME  = theldus
APP_PRODUCT_NAME  = crystalnim
APP_VERSION_CODE  = 1
APP_VERSION_NAME  = 1.0
APP_ICON_LDPI = $(CURDIR)/resources/logo/crystal_nim_36x36.png
APP_ICON_MDPI = $(CURDIR)/resources/logo/crystal_nim_48x48.png
APP_ICON_HDPI = $(CURDIR)/resources/logo/crystal_nim_72x72.png
APP_SCREEN_ORIENTATION = landscape
APP_KEYSTORE_PASS = pleasechangeme

#===================================================================
# Flags
#===================================================================

# ARM 64 builds
ifeq ($(ANDROID_ARCH),arm64)
    CC = $(ANDROID_TOOLCHAIN)/bin/aarch64-linux-android$(ANDROID_API_VERSION)-clang
    AR = $(ANDROID_TOOLCHAIN)/bin/aarch64-linux-android-ar
    STRIP = $(ANDROID_TOOLCHAIN)/bin/aarch64-linux-android-strip
    CFLAGS = -std=c99 -target aarch64 -mfix-cortex-a53-835769
    CFLAGS = -isystem $(ANDROID_TOOLCHAIN)/sysroot/usr/include/aarch64-linux-android
    ANDROID_ARCH_NAME = arm64-v8a
endif

# ARM v7 builds
ifeq ($(ANDROID_ARCH),arm)
    CC = $(ANDROID_TOOLCHAIN)/bin/arm-linux-androideabi-clang
    AR = $(ANDROID_TOOLCHAIN)/bin/arm-linux-androideabi-ar
    STRIP = $(ANDROID_TOOLCHAIN)/bin/arm-linux-androideabi-strip
    CFLAGS = -std=c99 -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16
    CFLAGS = -isystem $(ANDROID_TOOLCHAIN)/sysroot/usr/include/arm-linux-androideabi
    ANDROID_ARCH_NAME = armeabi-v7a
endif

CFLAGS += -D$(DEVICE_ASPECT_RATIO)
CFLAGS += -ffunction-sections -funwind-tables -fstack-protector-strong -fPIC
CFLAGS += -Wall -Wa,--noexecstack -Wformat -Werror=format-security \
	-no-canonical-prefixes
CFLAGS += -DANDROID -DPLATFORM_ANDROID -D__ANDROID_API__=$(ANDROID_API_VERSION)

# Linker flags
LDFLAGS  = -Wl,-soname,lib$(PROJECT_LIBRARY_NAME).so -Wl,--exclude-libs,libatomic.a 
LDFLAGS += -Wl,--build-id -Wl,--no-undefined -Wl,-z,noexecstack -Wl,-z,relro \
	-Wl,-z,now -Wl,--warn-shared-textrel -Wl,--fatal-warnings 
LDFLAGS += -u ANativeActivity_onCreate
LDFLAGS += -L. -L$(PROJECT_BUILD_PATH)/obj \
	-L$(PROJECT_BUILD_PATH)/lib/$(ANDROID_ARCH_NAME)

# Linker libraries
LDLIBS   = -lm -lc -llog -landroid -lEGL -lGLESv2 -lOpenSLES -ldl

#===================================================================
# Rules
#===================================================================

# Generate target objects list from PROJECT_SOURCE_FILES
OBJS = $(patsubst %.c, $(PROJECT_BUILD_PATH)/obj/%.o, $(PROJECT_SOURCE_FILES))

# Compile all .c files required into object (.o) files
# NOTE: Those files will be linked into a shared library
$(PROJECT_BUILD_PATH)/obj/%.o:%.c
	$(CC) -c $^ -o $@ $(INCLUDE) $(CFLAGS) --sysroot=$(ANDROID_TOOLCHAIN)/sysroot 

build-target: create_temp_project_dirs \
	copy_project_resources \
	generate_loader_script \
 	generate_android_manifest \
	generate_apk_keystore \
 	config_project_package \
	compile_project_code \
 	compile_project_class \
	compile_project_class_dex \
	create_project_apk_package \
	sign_project_apk_package \
	zipalign_project_apk_package

raylib-target: raylib

# --------------------------------------------------
raylib: $(RAYLIB_LIB)

$(RAYLIB_LIB): $(RAYLIB_SRC)/Makefile
	$(MAKE) -C $(RAYLIB_SRC) clean
	$(MAKE) -C $(RAYLIB_SRC)/ PLATFORM=PLATFORM_ANDROID
	$(MAKE) -C $(RAYLIB_SRC)/ install PLATFORM=PLATFORM_ANDROID PLATFORM_OS=LINUX\
		DESTDIR=$(RAYLIB_INST)/
	@mv $(RAYLIB_INST)/lib/libraylib.a $(RAYLIB_LIB)

$(RAYLIB_SRC)/Makefile:
	git submodule update --init
# --------------------------------------------------

# Create required temp directories for APK building
create_temp_project_dirs:
	@if [ -d $(PROJECT_BUILD_PATH) ]; then \
	  echo " [*] Directories for $(PROJECT_BUILD_PATH) are already built."; \
	else \
	  echo " [*] Creating directories for $(PROJECT_BUILD_PATH)"; \
	  mkdir -p $(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME); \
	  mkdir -p $(PROJECT_BUILD_PATH)/obj/screens; \
	  mkdir -p $(PROJECT_BUILD_PATH)/lib/$(ANDROID_ARCH_NAME); \
	  mkdir -p $(PROJECT_BUILD_PATH)/bin; \
	  mkdir -p $(PROJECT_BUILD_PATH)/res/drawable-{l,m,h}dpi; \
	  mkdir -p $(PROJECT_BUILD_PATH)/res/values; \
	  mkdir -p $(PROJECT_BUILD_PATH)/assets/$(PROJECT_RESOURCES_PATH); \
	  $(foreach dir, $(PROJECT_SOURCE_DIRS), mkdir -p $(PROJECT_BUILD_PATH)/obj/$(dir) ); \
	fi

# Copy project required resources: strings.xml, icon.png, assets
copy_project_resources:
	cp $(APP_ICON_LDPI) $(PROJECT_BUILD_PATH)/res/drawable-ldpi/icon.png
	cp $(APP_ICON_MDPI) $(PROJECT_BUILD_PATH)/res/drawable-mdpi/icon.png
	cp $(APP_ICON_HDPI) $(PROJECT_BUILD_PATH)/res/drawable-hdpi/icon.png
	@echo -e "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\
	   <resources>\n\
	       <string name=\"app_name\">\n\
		  $(APP_LABEL_NAME)\n\
	       </string>\n\
	   </resources>" > $(PROJECT_BUILD_PATH)/res/values/strings.xml
	@if [ -d $(PROJECT_RESOURCES_PATH) ]; then \
	    cp -a $(PROJECT_RESOURCES_PATH) $(PROJECT_BUILD_PATH)/assets/; \
	else \
	    echo " [*] Project resources path not found: $(PROJECT_RESOURCES_PATH)"; \
	fi

# Generate NativeLoader.java to load required shared libraries
generate_loader_script:
	@echo -e "package com.$(APP_COMPANY_NAME).$(APP_PRODUCT_NAME);\n\n\
	public class NativeLoader extends android.app.NativeActivity {\n\
	  static {\n\
	    System.loadLibrary(\"$(PROJECT_LIBRARY_NAME)\");\n\
	  }\n\
	}\n" > $(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java

# Generate AndroidManifest.xml with all the required options
generate_android_manifest:
	@echo -e \
	 "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\
	   <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\
          package=\"com.$(APP_COMPANY_NAME).$(APP_PRODUCT_NAME)\"\n\
          android:versionCode=\"$(APP_VERSION_CODE)\" android:versionName=\"$(APP_VERSION_NAME)\">\n\
	   <uses-sdk android:minSdkVersion=\"$(ANDROID_API_VERSION)\" />\n\
		   <uses-feature android:glEsVersion=\"0x00020000\" android:required=\"true\" />\n\
	   <application android:allowBackup=\"false\" android:label=\"@string/app_name\" android:icon=\"@drawable/icon\" >\n\
       <activity android:name=\"com.$(APP_COMPANY_NAME).$(APP_PRODUCT_NAME).NativeLoader\"\n\
         android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\n\
         android:configChanges=\"orientation|keyboardHidden|screenSize\"\n\
         android:screenOrientation=\"$(APP_SCREEN_ORIENTATION)\" android:launchMode=\"singleTask\"\n\
         android:clearTaskOnLaunch=\"true\">\n\
       <meta-data android:name=\"android.app.lib_name\" android:value=\"$(PROJECT_LIBRARY_NAME)\" />\n\
        <intent-filter>\n\
           <action android:name=\"android.intent.action.MAIN\" />\n\
               <category android:name=\"android.intent.category.LAUNCHER\" />\n\
     	</intent-filter>\n\
       </activity>\n\
	   </application>\n\
     </manifest>" > $(PROJECT_BUILD_PATH)/AndroidManifest.xml

# Generate storekey for APK signing: $(PROJECT_NAME).keystore
generate_apk_keystore:
	@if [ -s $(PROJECT_BUILD_PATH)/$(PROJECT_NAME).keystore ]; then \
		echo " [*] $(PROJECT_NAME).keystore already exists."; \
	else \
		echo " [*] $(PROJECT_NAME).keystore : generating now."; \
		keytool \
		-genkeypair \
		-validity 1000 \
		-dname "CN=$(APP_COMPANY_NAME),O=Android,C=ES" \
		-keystore $(PROJECT_BUILD_PATH)/$(PROJECT_NAME).keystore \
		-storepass $(APP_KEYSTORE_PASS) -keypass $(APP_KEYSTORE_PASS) \
		-alias $(PROJECT_NAME)Key -keyalg RSA; \
	fi; 

#
# Config project package and resource using AndroidManifest.xml and
# res/values/strings.xml
#
# NOTE: Generates resources file:
#     src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/R.java
#
config_project_package:
	$(ANDROID_BUILD_TOOLS)/aapt package -f -m -S $(PROJECT_BUILD_PATH)/res \
		-J $(PROJECT_BUILD_PATH)/src \
		-M $(PROJECT_BUILD_PATH)/AndroidManifest.xml \
		-I $(ANDROID_HOME)/platforms/android-$(ANDROID_API_VERSION)/android.jar

#
# Compile project code into a shared library:
#     lib/lib$(PROJECT_LIBRARY_NAME).so 
#
compile_project_code: $(OBJS) $(RAYLIB_LIB)
	$(CC) -o $(PROJECT_BUILD_PATH)/lib/$(ANDROID_ARCH_NAME)/lib$(PROJECT_LIBRARY_NAME).so \
		$^ -shared $(INCLUDE) $(LDFLAGS) $(LDLIBS)
	$(STRIP) --strip-all $(PROJECT_BUILD_PATH)/lib/$(ANDROID_ARCH_NAME)/lib$(PROJECT_LIBRARY_NAME).so

# Compile project .java code into .class (Java bytecode) 
compile_project_class:
	javac -verbose -source 1.7 -target 1.7 \
		-d $(PROJECT_BUILD_PATH)/obj -bootclasspath $(JAVA_HOME)/jre/lib/rt.jar \
		-classpath $(ANDROID_HOME)/platforms/android-$(ANDROID_API_VERSION)/android.jar:$(PROJECT_BUILD_PATH)/obj \
		-sourcepath $(PROJECT_BUILD_PATH)/src \
			$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/R.java \
			$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java

#
# Compile .class files into Dalvik executable bytecode (.dex)
# NOTE: Since Android 5.0, Dalvik interpreter (JIT) has been replaced by ART (AOT)
#
compile_project_class_dex:
	$(ANDROID_BUILD_TOOLS)/dx --verbose --dex \
		--output=$(PROJECT_BUILD_PATH)/bin/classes.dex $(PROJECT_BUILD_PATH)/obj

#
# Create Android APK package: bin/$(PROJECT_NAME).unsigned.apk
# NOTE: Requires compiled classes.dex and lib$(PROJECT_LIBRARY_NAME).so
# NOTE: Use -A resources to define additional directory in which to find raw asset files
#
create_project_apk_package:
	$(ANDROID_BUILD_TOOLS)/aapt package -f \
		-M $(PROJECT_BUILD_PATH)/AndroidManifest.xml \
		-S $(PROJECT_BUILD_PATH)/res -A $(PROJECT_BUILD_PATH)/assets \
		-I $(ANDROID_HOME)/platforms/android-$(ANDROID_API_VERSION)/android.jar \
		-F $(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).unsigned.apk $(PROJECT_BUILD_PATH)/bin
	cd $(PROJECT_BUILD_PATH) && \
		$(ANDROID_BUILD_TOOLS)/aapt add bin/$(PROJECT_NAME).unsigned.apk \
		lib/$(ANDROID_ARCH_NAME)/lib$(PROJECT_LIBRARY_NAME).so $(PROJECT_SHARED_LIBS)

#
# Create signed APK package using generated Key: 
#     bin/$(PROJECT_NAME).signed.apk 
#
sign_project_apk_package:
	jarsigner -keystore $(PROJECT_BUILD_PATH)/$(PROJECT_NAME).keystore \
		-storepass $(APP_KEYSTORE_PASS) -keypass $(APP_KEYSTORE_PASS) \
		-signedjar $(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).signed.apk \
		$(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).unsigned.apk $(PROJECT_NAME)Key

# Create zip-aligned APK package: $(PROJECT_NAME).apk 
zipalign_project_apk_package:
	$(ANDROID_BUILD_TOOLS)/zipalign -f 4 \
		$(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).signed.apk $(PROJECT_NAME).apk

clean-target:
	@rm -rf $(CURDIR)/$(PROJECT_BUILD_PATH)
	@rm -f $(CURDIR)/$(PROJECT_NAME).apk
